    function onPlayerSuccess(playerNumber, data) {
 
        document.getElementById(`${playerNumber}-player-display-name`).innerHTML = `<strong>Display Name:</strong> ${data[`${playerNumber}_display_name`]}`;
    handleChangeName('first-player-form', '/tournament_name_user/1/', function (data) {
        onPlayerSuccess('player1', data);
    });
    handleChangeName('second-player-form', '/tournament_name_user/2/', function (data) {
        onPlayerSuccess('player2', data);
    });
    handleChangeName('third-player-form', '/tournament_name_user/3/', function (data) {
        onPlayerSuccess('player3', data);
    });
    handleChangeName('fourth-player-form', '/tournament_name_user/4/', function (data) {
        onPlayerSuccess('player4', data);
    });
    }
    function handleChangeName(formId, endpoint, onSuccess) {
        const form = document.getElementById(formId);
        if (!form) return;
    
        form.addEventListener('submit', function (event) {
            event.preventDefault();  // Prevent default form submission
            const formData = new FormData(form);
            const csrfToken = getCSRFToken();  // Get the CSRF token
    
            fetch(endpoint, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRFToken': csrfToken || ''  // Ensure no error if token is missing
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    onSuccess(data);  // Call the success callback function
                } else {
                    alert(data.message || 'An error occurred.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while processing the request.');
            });
        });
    }
    // Handle create tournament form
    handleFormTournamentSubmission('create-tournament-form', '/create_tournament/', function (data) {
        const tournamentDiv = document.getElementById('tournament-info');
        const existingTournamentDiv = document.querySelector('.tournament');
    
        if (!tournamentDiv || !existingTournamentDiv) return;
    
        // Update the tournament info dynamically
        tournamentDiv.innerHTML = `
            <h3>Created Tournament: ${data.tournament_name}</h3>
            <p><strong>Creator:</strong> ${data.creator}</p>
            <p><strong>Players:</strong> ${data.player_count}</p>
            <p><strong>Avatar:</strong> <img src="${data.player1_avatar}" alt="Player Avatar" class="avatar"></p>
            <a href="/tournament/${data.tournament_id}/">View Tournament</a>
        `;
        tournamentDiv.style.display = 'block';  // Show the tournament info section
    
        // Optionally, update the list of players dynamically (if applicable)
        const playersList = existingTournamentDiv.querySelector('ul');
        if (playersList) {
            playersList.innerHTML = '';  // Clear the existing list
    
            // Add updated players list (if data contains player info)
            data.players.forEach(player => {
                const playerItem = document.createElement('li');
                playerItem.id = `Player${player.id}`;
                playerItem.innerHTML = `
                    <span class="Player name">${player.display_name}</span>
                    <span class="status-indicator" style="color: ${player.is_online ? 'green' : 'red'};">
                        ${player.is_online ? 'Online' : 'Offline'}
                    </span>
                `;
                playersList.appendChild(playerItem);
            });
        }
    });
    function handleSecondFormSubmission(formId, url, callback) {
        const form = document.getElementById(formId);
        form.addEventListener('submit', function (event) {
            event.preventDefault();  // Prevent default form submission
            const formData = new FormData(form);
            const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;
    
            fetch(url, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRFToken': csrfToken,  // Include CSRF token
                    'Accept': 'application/json'  // Explicitly expect JSON response
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    callback(data);  // Pass the response data to the callback function
                } else {
                    alert('!Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('?An error occurred.');
            });
        });
    }
    
    // Handle second player form
    handleSecondFormSubmission('second-player-form', '/second_player_tournament/', function (data) {
        alert(data.message);
            document.getElementById('second-player-display-name').innerHTML = `<strong>Display Name:</strong> ${data.player2_display_name}`;
            document.getElementById('second-player-wins').innerHTML = `<strong>Wins:</strong> ${data.player2_wins}`;
            document.getElementById('second-player-losses').innerHTML = `<strong>Losses:</strong> ${data.player2_losses}`;
            document.getElementById('second-player-id').innerHTML = `<strong>ID:</strong> ${data.player2_id}`;
    
            const avatar = document.getElementById('player2-avatar');
            if (avatar) {
                avatar.src = data.player2_avatar || '/media/avatars/default.png';  // Set default avatar if none
            }
            const form = document.getElementById('second-player-form');
            if (form) form.style.display = 'none';
    });
    handleSecondFormSubmission('third-player-form', '/third_player_tournament/', function (data) {
        alert(data.message);
            document.getElementById('third-player-display-name').innerHTML = `<strong>Display Name:</strong> ${data.player3_display_name}`;
            document.getElementById('third-player-wins').innerHTML = `<strong>Wins:</strong> ${data.player3_wins}`;
            document.getElementById('third-player-losses').innerHTML = `<strong>Losses:</strong> ${data.player3_losses}`;
            document.getElementById('third-player-id').innerHTML = `<strong>ID:</strong> ${data.player3_id}`;
    
            const avatar = document.getElementById('player3-avatar');
            if (avatar) {
                avatar.src = data.player3_avatar || '/media/avatars/default.png';  // Set default avatar if none
            }
            const form = document.getElementById('third-player-form');
            if (form) form.style.display = 'none';
    });
    handleSecondFormSubmission('forth-player-form', '/forth_player_tournament/', function (data) {
        alert(data.message);
            document.getElementById('forth-player-display-name').innerHTML = `<strong>Display Name:</strong> ${data.player4_display_name}`;
            document.getElementById('forth-player-wins').innerHTML = `<strong>Wins:</strong> ${data.player4_wins}`;
            document.getElementById('forth-player-losses').innerHTML = `<strong>Losses:</strong> ${data.player4_losses}`;
            document.getElementById('forth-player-id').innerHTML = `<strong>ID:</strong> ${data.player4_id}`;
    
            const avatar = document.getElementById('player4-avatar');
            if (avatar) {
                avatar.src = data.player4_avatar || '/media/avatars/default.png';  // Set default avatar if none
            }
            const form = document.getElementById('forth-player-form');
            if (form) form.style.display = 'none';
    });
    